/** Controller for showing the quiz results comparison page
	It uses QuizResultsModel to get the data.
**/
var QuizResultsCtrl=function(QuizResultsModel){
	this.model=QuizResultsModel.model;
	QuizResultsModel.getResults();
}
/** Model for showing the quiz results comparison page
	It uses QuizResultsModel to get the data.
**/
var QuizResultsModel=function($http,$q,QuizModel,spinnerService){
	this.model={};
	this.$http=$http;
	this.spinnerService=spinnerService;
	this.model.questions=QuizModel.model.questions;
	this.numberOfQuestions=this.model.questions.length;

}

//Method to get the submitted data from count.io
QuizResultsModel.prototype.getResults=function(){
	var service=this;
	var results=[];

	for(var i=0; i< this.numberOfQuestions;i++){
		// Service which uses node proxy to get data from count.io
		service.$http.get("/vb/"+this.model.questions[i].group)
			.success(function(data){		
				results.push(data);
				service.model.results=results;
				service.spinnerService.stopSpinner();
			});	

}
			this.spinnerService.startSpinner();	
}
// Controller to get the model for quiz page.
var QuizCtrl=function(QuizModel,QuizQuestionsService){
	var service=this;
	this.service=QuizQuestionsService;
	this.QuizModel=QuizModel;
	this.model=QuizModel.model;
	// Method to get the questions and displays the question
	this.QuizModel.getQuestions().then(function(data){
		QuizModel.nextQuestion();
	});
	// Method to count the number of questions using QuizQuestionsService
	this.count=function(fruit,group){
		this.service.count(fruit,group);
	}
}
// Model to displays the model for quiz questions
var QuizModel=function($http,$q,$location){
	this.model={};
	this.questionsList="";
	this.$http=$http;
	this.$q=$q;
	this.counter=0;
	this.url="/data/questions-data.js";
	this.numberOfQuestions=0;
	this.$location=$location;
};

// Method which gets the questions from backend json
QuizModel.prototype.getQuestions=function(){
	var deferred=this.$q.defer();
	var service=this;
	this.$http.get(this.url)
		.success(function(data){
			deferred.resolve(service.transformResponse(data));
	});
	return deferred.promise;
}
// The email id is set from quizregistermodel
QuizModel.prototype.setUser=function(email){
	this.model.emailId=email;
};
// Method which transforms the response
QuizModel.prototype.transformResponse=function(data){
	this.model.questions=data.Questions;
	this.numberOfQuestions=data.Questions.length;
};

// Get the next question
QuizModel.prototype.nextQuestion=function(){
	if(this.numberOfQuestions > this.counter){
		this.model.question=this.model.questions[this.counter++];
		this.model.question.qNumber=this.counter;
	}
	else{
		this.$location.path("/results");
	}
};
/** Service to get the questions from count.io
	It uses spinnerservice to start and stop the spinner
**/
var QuizQuestionsService=function($http,$q,QuizModel,spinnerService){
	this.$http=$http;
	this.$q=$q;
	this.QuizModel=QuizModel;
	this.spinnerService=spinnerService;
	
};
// Method which updates the count.io with answers.
QuizQuestionsService.prototype.count=function(type,group){
	var service=this;
	this.$http.post("http://count.io/vb/"+group+"/"+type+"+")
		.success(function(data){
			service.QuizModel.nextQuestion();
			 service.spinnerService.stopSpinner();
	});
			 service.spinnerService.startSpinner();//S
};
/** Controller which display the register page for quiz
	It uses Quiz Register model to display the data.
**/
var QuizAppRegisterCtrl=function(QuizAppRegisterModel){
	this.model=QuizAppRegisterModel;

}
/**
	Model for displaying the data 
	It uses QuizModel to get the email id on Quiz questions 
	page
**/
var QuizAppRegisterModel=function($location,QuizModel){
	this.emailId;
	this.errorMessage="";
	this.QuizModel=QuizModel;
	this.$location=$location;

};
// This method navigates to to start the quiz if the email id is entered.
QuizAppRegisterModel.prototype.navigate=function(){
		if(this.emailId!==undefined && this.emailId!==""){
			// This method sets the user details to quiz question id
			this.QuizModel.setUser(this.emailId);
			this.$location.path("/quizhome");
		}
		else{
			this.errorMessage="Please enter correct email id";
		}	
};
// Load spinner plugin which uses spinner service to start and stop the timer

function loadSpinner(spinnerService){

return{
	restrict:'A',
	scope:{
		
	},
	template:'<div class="{{spinnerConfig.class}}"></div>',
	link:function($scope, element,attributes){
		$scope.spinnerConfig=spinnerService.spinnerConfig;

	}
}

}
// Timer bar directive which is used to generate timer along with bar.
function pageTimer($interval, $filter,$location){

return{
	restrict:'A',
	scope:{
		totaltime:'=totaltime'
	},
	templateUrl:"templates/timer.html",
	link:function($scope, element,attributes){
		 $scope.pageTime=$scope.totaltime*60*1000;
		 $scope.width=200;
		 var promise;
		 var seconds=$scope.totaltime*60;
		 var loadBarTime=$scope.width/seconds;
		 $scope.startTimer=function(){

			 if($scope.pageTime > 0){
				
				$scope.pageTime=$scope.pageTime-1000;
				$scope.width=$scope.width-loadBarTime;
				
			
			  }
			  else{
					$interval.cancel(promise);
					$location.path("/Quiztimeout");
			  }

		 }
				promise=$interval($scope.startTimer, 1000);

	}
}

}
// Service which is used by spinner directive

var spinnerService=function(){
	this.spinnerConfig={};
	this.spinnerConfig.class="myname";
	
};
// Method to start timer
spinnerService.prototype.startSpinner=function(){
	this.spinnerConfig.class="showSpinner";

};
// Method to stop timer
spinnerService.prototype.stopSpinner=function(){
	this.spinnerConfig.class="";

};
angular.module('QuizApp.TakeQuiz',['Utilities'])
.service('QuizQuestionsService',QuizQuestionsService)
.service('QuizModel',QuizModel)
.controller('QuizCtrl',QuizCtrl);
angular.module('QuizApp.Register',[])
.service('QuizAppRegisterModel',QuizAppRegisterModel)
.controller('QuizAppRegisterCtrl',QuizAppRegisterCtrl);

angular.module('Utilities',[])
.directive('pageTimer', pageTimer)
.directive('loadSpinner',loadSpinner)
.service('spinnerService',spinnerService);


angular.module('QuizApp.results',[])
.service('QuizResultsModel',QuizResultsModel)
.controller('QuizResultsCtrl',QuizResultsCtrl);

// Intializing Quiz app
var QuizApp=angular.module('QuizApp', ['ui.router','QuizApp.Register','QuizApp.TakeQuiz','QuizApp.results']);
// Ui router for routing to different stages
QuizApp.config(function($stateProvider, $urlRouterProvider) {
    
    $urlRouterProvider.otherwise('/home');
    
    $stateProvider
        .state('home', {
            url: '/home',
            templateUrl: 'templates/home.html'
        })
        .state('quizhome', {
				url: '/quizhome',
				templateUrl:'templates/quizhome.html'
        })
		.state('results', {
				url: '/results',
				templateUrl:'templates/results.html'
        })
		.state('Quiztimeout', {
				url: '/Quiztimeout',
				templateUrl:'templates/Quiztimeout.html'
        })
		
        
});


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlF1aXpSZXN1bHRzLW1vZHVsZS9jb250cm9sbGVycy9RdWl6UmVzdWx0c0N0cmwuanMiLCJRdWl6UmVzdWx0cy1tb2R1bGUvdmlldy1tb2RlbHMvUXVpelJlc3VsdHNNb2RlbC5qcyIsIlRha2VRdWl6LW1vZHVsZS9jb250cm9sbGVycy9RdWl6Q3RybC5qcyIsIlRha2VRdWl6LW1vZHVsZS92aWV3LW1vZGVscy9RdWl6TW9kZWwuanMiLCJUYWtlUXVpei1tb2R1bGUvc2VydmljZXMvUXVpelF1ZXN0aW9uU2VydmljZS5qcyIsInJlZ2lzdGVyLW1vZHVsZS9jb250cm9sbGVycy9RdWl6QXBwUmVnaXN0ZXJDdHJsLmpzIiwicmVnaXN0ZXItbW9kdWxlL3ZpZXctbW9kZWxzL1F1aXpBcHBSZWdpc3Rlck1vZGVsLmpzIiwidXRpbGl0aWVzLW1vZHVsZS9kaXJlY3RpdmVzL2xvYWRTcGlubmVyLmpzIiwidXRpbGl0aWVzLW1vZHVsZS9kaXJlY3RpdmVzL3BhZ2VUaW1lci5qcyIsInV0aWxpdGllcy1tb2R1bGUvc2VydmljZXMvc3Bpbm5lclNlcnZpY2UuanMiLCJUYWtlUXVpei1tb2R1bGUvYXBwLmpzIiwicmVnaXN0ZXItbW9kdWxlL2FwcC5qcyIsInV0aWxpdGllcy1tb2R1bGUvYXBwLmpzIiwiUXVpelJlc3VsdHMtbW9kdWxlL2FwcC5qcyIsImFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvbnRyb2xsZXIgZm9yIHNob3dpbmcgdGhlIHF1aXogcmVzdWx0cyBjb21wYXJpc29uIHBhZ2VcclxuXHRJdCB1c2VzIFF1aXpSZXN1bHRzTW9kZWwgdG8gZ2V0IHRoZSBkYXRhLlxyXG4qKi9cclxudmFyIFF1aXpSZXN1bHRzQ3RybD1mdW5jdGlvbihRdWl6UmVzdWx0c01vZGVsKXtcclxuXHR0aGlzLm1vZGVsPVF1aXpSZXN1bHRzTW9kZWwubW9kZWw7XHJcblx0UXVpelJlc3VsdHNNb2RlbC5nZXRSZXN1bHRzKCk7XHJcbn0iLCIvKiogTW9kZWwgZm9yIHNob3dpbmcgdGhlIHF1aXogcmVzdWx0cyBjb21wYXJpc29uIHBhZ2VcclxuXHRJdCB1c2VzIFF1aXpSZXN1bHRzTW9kZWwgdG8gZ2V0IHRoZSBkYXRhLlxyXG4qKi9cclxudmFyIFF1aXpSZXN1bHRzTW9kZWw9ZnVuY3Rpb24oJGh0dHAsJHEsUXVpek1vZGVsLHNwaW5uZXJTZXJ2aWNlKXtcclxuXHR0aGlzLm1vZGVsPXt9O1xyXG5cdHRoaXMuJGh0dHA9JGh0dHA7XHJcblx0dGhpcy5zcGlubmVyU2VydmljZT1zcGlubmVyU2VydmljZTtcclxuXHR0aGlzLm1vZGVsLnF1ZXN0aW9ucz1RdWl6TW9kZWwubW9kZWwucXVlc3Rpb25zO1xyXG5cdHRoaXMubnVtYmVyT2ZRdWVzdGlvbnM9dGhpcy5tb2RlbC5xdWVzdGlvbnMubGVuZ3RoO1xyXG5cclxufVxyXG5cclxuLy9NZXRob2QgdG8gZ2V0IHRoZSBzdWJtaXR0ZWQgZGF0YSBmcm9tIGNvdW50LmlvXHJcblF1aXpSZXN1bHRzTW9kZWwucHJvdG90eXBlLmdldFJlc3VsdHM9ZnVuY3Rpb24oKXtcclxuXHR2YXIgc2VydmljZT10aGlzO1xyXG5cdHZhciByZXN1bHRzPVtdO1xyXG5cclxuXHRmb3IodmFyIGk9MDsgaTwgdGhpcy5udW1iZXJPZlF1ZXN0aW9ucztpKyspe1xyXG5cdFx0Ly8gU2VydmljZSB3aGljaCB1c2VzIG5vZGUgcHJveHkgdG8gZ2V0IGRhdGEgZnJvbSBjb3VudC5pb1xyXG5cdFx0c2VydmljZS4kaHR0cC5nZXQoXCIvdmIvXCIrdGhpcy5tb2RlbC5xdWVzdGlvbnNbaV0uZ3JvdXApXHJcblx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpe1x0XHRcclxuXHRcdFx0XHRyZXN1bHRzLnB1c2goZGF0YSk7XHJcblx0XHRcdFx0c2VydmljZS5tb2RlbC5yZXN1bHRzPXJlc3VsdHM7XHJcblx0XHRcdFx0c2VydmljZS5zcGlubmVyU2VydmljZS5zdG9wU3Bpbm5lcigpO1xyXG5cdFx0XHR9KTtcdFxyXG5cclxufVxyXG5cdFx0XHR0aGlzLnNwaW5uZXJTZXJ2aWNlLnN0YXJ0U3Bpbm5lcigpO1x0XHJcbn0iLCIvLyBDb250cm9sbGVyIHRvIGdldCB0aGUgbW9kZWwgZm9yIHF1aXogcGFnZS5cclxudmFyIFF1aXpDdHJsPWZ1bmN0aW9uKFF1aXpNb2RlbCxRdWl6UXVlc3Rpb25zU2VydmljZSl7XHJcblx0dmFyIHNlcnZpY2U9dGhpcztcclxuXHR0aGlzLnNlcnZpY2U9UXVpelF1ZXN0aW9uc1NlcnZpY2U7XHJcblx0dGhpcy5RdWl6TW9kZWw9UXVpek1vZGVsO1xyXG5cdHRoaXMubW9kZWw9UXVpek1vZGVsLm1vZGVsO1xyXG5cdC8vIE1ldGhvZCB0byBnZXQgdGhlIHF1ZXN0aW9ucyBhbmQgZGlzcGxheXMgdGhlIHF1ZXN0aW9uXHJcblx0dGhpcy5RdWl6TW9kZWwuZ2V0UXVlc3Rpb25zKCkudGhlbihmdW5jdGlvbihkYXRhKXtcclxuXHRcdFF1aXpNb2RlbC5uZXh0UXVlc3Rpb24oKTtcclxuXHR9KTtcclxuXHQvLyBNZXRob2QgdG8gY291bnQgdGhlIG51bWJlciBvZiBxdWVzdGlvbnMgdXNpbmcgUXVpelF1ZXN0aW9uc1NlcnZpY2VcclxuXHR0aGlzLmNvdW50PWZ1bmN0aW9uKGZydWl0LGdyb3VwKXtcclxuXHRcdHRoaXMuc2VydmljZS5jb3VudChmcnVpdCxncm91cCk7XHJcblx0fVxyXG59IiwiLy8gTW9kZWwgdG8gZGlzcGxheXMgdGhlIG1vZGVsIGZvciBxdWl6IHF1ZXN0aW9uc1xyXG52YXIgUXVpek1vZGVsPWZ1bmN0aW9uKCRodHRwLCRxLCRsb2NhdGlvbil7XHJcblx0dGhpcy5tb2RlbD17fTtcclxuXHR0aGlzLnF1ZXN0aW9uc0xpc3Q9XCJcIjtcclxuXHR0aGlzLiRodHRwPSRodHRwO1xyXG5cdHRoaXMuJHE9JHE7XHJcblx0dGhpcy5jb3VudGVyPTA7XHJcblx0dGhpcy51cmw9XCIvZGF0YS9xdWVzdGlvbnMtZGF0YS5qc1wiO1xyXG5cdHRoaXMubnVtYmVyT2ZRdWVzdGlvbnM9MDtcclxuXHR0aGlzLiRsb2NhdGlvbj0kbG9jYXRpb247XHJcbn07XHJcblxyXG4vLyBNZXRob2Qgd2hpY2ggZ2V0cyB0aGUgcXVlc3Rpb25zIGZyb20gYmFja2VuZCBqc29uXHJcblF1aXpNb2RlbC5wcm90b3R5cGUuZ2V0UXVlc3Rpb25zPWZ1bmN0aW9uKCl7XHJcblx0dmFyIGRlZmVycmVkPXRoaXMuJHEuZGVmZXIoKTtcclxuXHR2YXIgc2VydmljZT10aGlzO1xyXG5cdHRoaXMuJGh0dHAuZ2V0KHRoaXMudXJsKVxyXG5cdFx0LnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSl7XHJcblx0XHRcdGRlZmVycmVkLnJlc29sdmUoc2VydmljZS50cmFuc2Zvcm1SZXNwb25zZShkYXRhKSk7XHJcblx0fSk7XHJcblx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbn1cclxuLy8gVGhlIGVtYWlsIGlkIGlzIHNldCBmcm9tIHF1aXpyZWdpc3Rlcm1vZGVsXHJcblF1aXpNb2RlbC5wcm90b3R5cGUuc2V0VXNlcj1mdW5jdGlvbihlbWFpbCl7XHJcblx0dGhpcy5tb2RlbC5lbWFpbElkPWVtYWlsO1xyXG59O1xyXG4vLyBNZXRob2Qgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzcG9uc2VcclxuUXVpek1vZGVsLnByb3RvdHlwZS50cmFuc2Zvcm1SZXNwb25zZT1mdW5jdGlvbihkYXRhKXtcclxuXHR0aGlzLm1vZGVsLnF1ZXN0aW9ucz1kYXRhLlF1ZXN0aW9ucztcclxuXHR0aGlzLm51bWJlck9mUXVlc3Rpb25zPWRhdGEuUXVlc3Rpb25zLmxlbmd0aDtcclxufTtcclxuXHJcbi8vIEdldCB0aGUgbmV4dCBxdWVzdGlvblxyXG5RdWl6TW9kZWwucHJvdG90eXBlLm5leHRRdWVzdGlvbj1mdW5jdGlvbigpe1xyXG5cdGlmKHRoaXMubnVtYmVyT2ZRdWVzdGlvbnMgPiB0aGlzLmNvdW50ZXIpe1xyXG5cdFx0dGhpcy5tb2RlbC5xdWVzdGlvbj10aGlzLm1vZGVsLnF1ZXN0aW9uc1t0aGlzLmNvdW50ZXIrK107XHJcblx0XHR0aGlzLm1vZGVsLnF1ZXN0aW9uLnFOdW1iZXI9dGhpcy5jb3VudGVyO1xyXG5cdH1cclxuXHRlbHNle1xyXG5cdFx0dGhpcy4kbG9jYXRpb24ucGF0aChcIi9yZXN1bHRzXCIpO1xyXG5cdH1cclxufTsiLCIvKiogU2VydmljZSB0byBnZXQgdGhlIHF1ZXN0aW9ucyBmcm9tIGNvdW50LmlvXHJcblx0SXQgdXNlcyBzcGlubmVyc2VydmljZSB0byBzdGFydCBhbmQgc3RvcCB0aGUgc3Bpbm5lclxyXG4qKi9cclxudmFyIFF1aXpRdWVzdGlvbnNTZXJ2aWNlPWZ1bmN0aW9uKCRodHRwLCRxLFF1aXpNb2RlbCxzcGlubmVyU2VydmljZSl7XHJcblx0dGhpcy4kaHR0cD0kaHR0cDtcclxuXHR0aGlzLiRxPSRxO1xyXG5cdHRoaXMuUXVpek1vZGVsPVF1aXpNb2RlbDtcclxuXHR0aGlzLnNwaW5uZXJTZXJ2aWNlPXNwaW5uZXJTZXJ2aWNlO1xyXG5cdFxyXG59O1xyXG4vLyBNZXRob2Qgd2hpY2ggdXBkYXRlcyB0aGUgY291bnQuaW8gd2l0aCBhbnN3ZXJzLlxyXG5RdWl6UXVlc3Rpb25zU2VydmljZS5wcm90b3R5cGUuY291bnQ9ZnVuY3Rpb24odHlwZSxncm91cCl7XHJcblx0dmFyIHNlcnZpY2U9dGhpcztcclxuXHR0aGlzLiRodHRwLnBvc3QoXCJodHRwOi8vY291bnQuaW8vdmIvXCIrZ3JvdXArXCIvXCIrdHlwZStcIitcIilcclxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpe1xyXG5cdFx0XHRzZXJ2aWNlLlF1aXpNb2RlbC5uZXh0UXVlc3Rpb24oKTtcclxuXHRcdFx0IHNlcnZpY2Uuc3Bpbm5lclNlcnZpY2Uuc3RvcFNwaW5uZXIoKTtcclxuXHR9KTtcclxuXHRcdFx0IHNlcnZpY2Uuc3Bpbm5lclNlcnZpY2Uuc3RhcnRTcGlubmVyKCk7Ly9TXHJcbn07IiwiLyoqIENvbnRyb2xsZXIgd2hpY2ggZGlzcGxheSB0aGUgcmVnaXN0ZXIgcGFnZSBmb3IgcXVpelxyXG5cdEl0IHVzZXMgUXVpeiBSZWdpc3RlciBtb2RlbCB0byBkaXNwbGF5IHRoZSBkYXRhLlxyXG4qKi9cclxudmFyIFF1aXpBcHBSZWdpc3RlckN0cmw9ZnVuY3Rpb24oUXVpekFwcFJlZ2lzdGVyTW9kZWwpe1xyXG5cdHRoaXMubW9kZWw9UXVpekFwcFJlZ2lzdGVyTW9kZWw7XHJcblxyXG59IiwiLyoqXHJcblx0TW9kZWwgZm9yIGRpc3BsYXlpbmcgdGhlIGRhdGEgXHJcblx0SXQgdXNlcyBRdWl6TW9kZWwgdG8gZ2V0IHRoZSBlbWFpbCBpZCBvbiBRdWl6IHF1ZXN0aW9ucyBcclxuXHRwYWdlXHJcbioqL1xyXG52YXIgUXVpekFwcFJlZ2lzdGVyTW9kZWw9ZnVuY3Rpb24oJGxvY2F0aW9uLFF1aXpNb2RlbCl7XHJcblx0dGhpcy5lbWFpbElkO1xyXG5cdHRoaXMuZXJyb3JNZXNzYWdlPVwiXCI7XHJcblx0dGhpcy5RdWl6TW9kZWw9UXVpek1vZGVsO1xyXG5cdHRoaXMuJGxvY2F0aW9uPSRsb2NhdGlvbjtcclxuXHJcbn07XHJcbi8vIFRoaXMgbWV0aG9kIG5hdmlnYXRlcyB0byB0byBzdGFydCB0aGUgcXVpeiBpZiB0aGUgZW1haWwgaWQgaXMgZW50ZXJlZC5cclxuUXVpekFwcFJlZ2lzdGVyTW9kZWwucHJvdG90eXBlLm5hdmlnYXRlPWZ1bmN0aW9uKCl7XHJcblx0XHRpZih0aGlzLmVtYWlsSWQhPT11bmRlZmluZWQgJiYgdGhpcy5lbWFpbElkIT09XCJcIil7XHJcblx0XHRcdC8vIFRoaXMgbWV0aG9kIHNldHMgdGhlIHVzZXIgZGV0YWlscyB0byBxdWl6IHF1ZXN0aW9uIGlkXHJcblx0XHRcdHRoaXMuUXVpek1vZGVsLnNldFVzZXIodGhpcy5lbWFpbElkKTtcclxuXHRcdFx0dGhpcy4kbG9jYXRpb24ucGF0aChcIi9xdWl6aG9tZVwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2V7XHJcblx0XHRcdHRoaXMuZXJyb3JNZXNzYWdlPVwiUGxlYXNlIGVudGVyIGNvcnJlY3QgZW1haWwgaWRcIjtcclxuXHRcdH1cdFxyXG59OyIsIi8vIExvYWQgc3Bpbm5lciBwbHVnaW4gd2hpY2ggdXNlcyBzcGlubmVyIHNlcnZpY2UgdG8gc3RhcnQgYW5kIHN0b3AgdGhlIHRpbWVyXHJcblxyXG5mdW5jdGlvbiBsb2FkU3Bpbm5lcihzcGlubmVyU2VydmljZSl7XHJcblxyXG5yZXR1cm57XHJcblx0cmVzdHJpY3Q6J0EnLFxyXG5cdHNjb3BlOntcclxuXHRcdFxyXG5cdH0sXHJcblx0dGVtcGxhdGU6JzxkaXYgY2xhc3M9XCJ7e3NwaW5uZXJDb25maWcuY2xhc3N9fVwiPjwvZGl2PicsXHJcblx0bGluazpmdW5jdGlvbigkc2NvcGUsIGVsZW1lbnQsYXR0cmlidXRlcyl7XHJcblx0XHQkc2NvcGUuc3Bpbm5lckNvbmZpZz1zcGlubmVyU2VydmljZS5zcGlubmVyQ29uZmlnO1xyXG5cclxuXHR9XHJcbn1cclxuXHJcbn0iLCIvLyBUaW1lciBiYXIgZGlyZWN0aXZlIHdoaWNoIGlzIHVzZWQgdG8gZ2VuZXJhdGUgdGltZXIgYWxvbmcgd2l0aCBiYXIuXHJcbmZ1bmN0aW9uIHBhZ2VUaW1lcigkaW50ZXJ2YWwsICRmaWx0ZXIsJGxvY2F0aW9uKXtcclxuXHJcbnJldHVybntcclxuXHRyZXN0cmljdDonQScsXHJcblx0c2NvcGU6e1xyXG5cdFx0dG90YWx0aW1lOic9dG90YWx0aW1lJ1xyXG5cdH0sXHJcblx0dGVtcGxhdGVVcmw6XCJ0ZW1wbGF0ZXMvdGltZXIuaHRtbFwiLFxyXG5cdGxpbms6ZnVuY3Rpb24oJHNjb3BlLCBlbGVtZW50LGF0dHJpYnV0ZXMpe1xyXG5cdFx0ICRzY29wZS5wYWdlVGltZT0kc2NvcGUudG90YWx0aW1lKjYwKjEwMDA7XHJcblx0XHQgJHNjb3BlLndpZHRoPTIwMDtcclxuXHRcdCB2YXIgcHJvbWlzZTtcclxuXHRcdCB2YXIgc2Vjb25kcz0kc2NvcGUudG90YWx0aW1lKjYwO1xyXG5cdFx0IHZhciBsb2FkQmFyVGltZT0kc2NvcGUud2lkdGgvc2Vjb25kcztcclxuXHRcdCAkc2NvcGUuc3RhcnRUaW1lcj1mdW5jdGlvbigpe1xyXG5cclxuXHRcdFx0IGlmKCRzY29wZS5wYWdlVGltZSA+IDApe1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdCRzY29wZS5wYWdlVGltZT0kc2NvcGUucGFnZVRpbWUtMTAwMDtcclxuXHRcdFx0XHQkc2NvcGUud2lkdGg9JHNjb3BlLndpZHRoLWxvYWRCYXJUaW1lO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcclxuXHRcdFx0ICB9XHJcblx0XHRcdCAgZWxzZXtcclxuXHRcdFx0XHRcdCRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XHJcblx0XHRcdFx0XHQkbG9jYXRpb24ucGF0aChcIi9RdWl6dGltZW91dFwiKTtcclxuXHRcdFx0ICB9XHJcblxyXG5cdFx0IH1cclxuXHRcdFx0XHRwcm9taXNlPSRpbnRlcnZhbCgkc2NvcGUuc3RhcnRUaW1lciwgMTAwMCk7XHJcblxyXG5cdH1cclxufVxyXG5cclxufSIsIi8vIFNlcnZpY2Ugd2hpY2ggaXMgdXNlZCBieSBzcGlubmVyIGRpcmVjdGl2ZVxyXG5cclxudmFyIHNwaW5uZXJTZXJ2aWNlPWZ1bmN0aW9uKCl7XHJcblx0dGhpcy5zcGlubmVyQ29uZmlnPXt9O1xyXG5cdHRoaXMuc3Bpbm5lckNvbmZpZy5jbGFzcz1cIm15bmFtZVwiO1xyXG5cdFxyXG59O1xyXG4vLyBNZXRob2QgdG8gc3RhcnQgdGltZXJcclxuc3Bpbm5lclNlcnZpY2UucHJvdG90eXBlLnN0YXJ0U3Bpbm5lcj1mdW5jdGlvbigpe1xyXG5cdHRoaXMuc3Bpbm5lckNvbmZpZy5jbGFzcz1cInNob3dTcGlubmVyXCI7XHJcblxyXG59O1xyXG4vLyBNZXRob2QgdG8gc3RvcCB0aW1lclxyXG5zcGlubmVyU2VydmljZS5wcm90b3R5cGUuc3RvcFNwaW5uZXI9ZnVuY3Rpb24oKXtcclxuXHR0aGlzLnNwaW5uZXJDb25maWcuY2xhc3M9XCJcIjtcclxuXHJcbn07IiwiYW5ndWxhci5tb2R1bGUoJ1F1aXpBcHAuVGFrZVF1aXonLFsnVXRpbGl0aWVzJ10pXHJcbi5zZXJ2aWNlKCdRdWl6UXVlc3Rpb25zU2VydmljZScsUXVpelF1ZXN0aW9uc1NlcnZpY2UpXHJcbi5zZXJ2aWNlKCdRdWl6TW9kZWwnLFF1aXpNb2RlbClcclxuLmNvbnRyb2xsZXIoJ1F1aXpDdHJsJyxRdWl6Q3RybCk7IiwiYW5ndWxhci5tb2R1bGUoJ1F1aXpBcHAuUmVnaXN0ZXInLFtdKVxyXG4uc2VydmljZSgnUXVpekFwcFJlZ2lzdGVyTW9kZWwnLFF1aXpBcHBSZWdpc3Rlck1vZGVsKVxyXG4uY29udHJvbGxlcignUXVpekFwcFJlZ2lzdGVyQ3RybCcsUXVpekFwcFJlZ2lzdGVyQ3RybCk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdVdGlsaXRpZXMnLFtdKVxyXG4uZGlyZWN0aXZlKCdwYWdlVGltZXInLCBwYWdlVGltZXIpXHJcbi5kaXJlY3RpdmUoJ2xvYWRTcGlubmVyJyxsb2FkU3Bpbm5lcilcclxuLnNlcnZpY2UoJ3NwaW5uZXJTZXJ2aWNlJyxzcGlubmVyU2VydmljZSk7XHJcblxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnUXVpekFwcC5yZXN1bHRzJyxbXSlcclxuLnNlcnZpY2UoJ1F1aXpSZXN1bHRzTW9kZWwnLFF1aXpSZXN1bHRzTW9kZWwpXHJcbi5jb250cm9sbGVyKCdRdWl6UmVzdWx0c0N0cmwnLFF1aXpSZXN1bHRzQ3RybCk7XHJcbiIsIi8vIEludGlhbGl6aW5nIFF1aXogYXBwXHJcbnZhciBRdWl6QXBwPWFuZ3VsYXIubW9kdWxlKCdRdWl6QXBwJywgWyd1aS5yb3V0ZXInLCdRdWl6QXBwLlJlZ2lzdGVyJywnUXVpekFwcC5UYWtlUXVpeicsJ1F1aXpBcHAucmVzdWx0cyddKTtcclxuLy8gVWkgcm91dGVyIGZvciByb3V0aW5nIHRvIGRpZmZlcmVudCBzdGFnZXNcclxuUXVpekFwcC5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xyXG4gICAgXHJcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvaG9tZScpO1xyXG4gICAgXHJcbiAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAgIC5zdGF0ZSgnaG9tZScsIHtcclxuICAgICAgICAgICAgdXJsOiAnL2hvbWUnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy9ob21lLmh0bWwnXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3RhdGUoJ3F1aXpob21lJywge1xyXG5cdFx0XHRcdHVybDogJy9xdWl6aG9tZScsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6J3RlbXBsYXRlcy9xdWl6aG9tZS5odG1sJ1xyXG4gICAgICAgIH0pXHJcblx0XHQuc3RhdGUoJ3Jlc3VsdHMnLCB7XHJcblx0XHRcdFx0dXJsOiAnL3Jlc3VsdHMnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOid0ZW1wbGF0ZXMvcmVzdWx0cy5odG1sJ1xyXG4gICAgICAgIH0pXHJcblx0XHQuc3RhdGUoJ1F1aXp0aW1lb3V0Jywge1xyXG5cdFx0XHRcdHVybDogJy9RdWl6dGltZW91dCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6J3RlbXBsYXRlcy9RdWl6dGltZW91dC5odG1sJ1xyXG4gICAgICAgIH0pXHJcblx0XHRcclxuICAgICAgICBcclxufSk7XHJcblxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=